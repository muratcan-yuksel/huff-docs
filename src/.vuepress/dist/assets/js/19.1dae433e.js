(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{447:function(t,s,n){"use strict";n.r(s);var a=n(66),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"style-guide"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#style-guide"}},[t._v("#")]),t._v(" Style Guide")]),t._v(" "),n("p",[t._v("The following is a style-guide for the Huff-Std library. "),n("a",{attrs:{href:"https://discord.gg/xabvMWDpEf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Feedback and discussion"),n("OutboundLink")],1),t._v(" is welcome.")]),t._v(" "),n("h2",{attrs:{id:"formatting"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#formatting"}},[t._v("#")]),t._v(" Formatting")]),t._v(" "),n("p",[t._v("Lines should be no greater than 100 characters (disregarding long constant names/values).")]),t._v(" "),n("p",[t._v("Files should use 4 spaces for indentions.")]),t._v(" "),n("h2",{attrs:{id:"file-structure"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#file-structure"}},[t._v("#")]),t._v(" File Structure")]),t._v(" "),n("p",[t._v("The file structure of a Huff contract so follow this:")]),t._v(" "),n("div",{staticClass:"language-solidity extra-class"},[n("pre",{pre:!0,attrs:{class:"language-solidity"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Imports */")]),t._v("\n#include "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./contracts/utils/ExampleImport1.huff"')]),t._v("\n#include "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./contracts/utils/ExampleImport2.huff"')]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Function Interfaces */")]),t._v("\n#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("exampleFunction1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" nonpayable "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("exampleFunction2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" nonpayable "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("exampleFunction3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" nonpayable "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("exampleFunction4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" nonpayable "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("event")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ExampleEvent1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indexed")]),t._v(" example"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("event")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ExampleEvent2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indexed")]),t._v(" example"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Events Signatures */")]),t._v("\n#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constant")]),t._v(" EXAMPLE_EVENT_SIGNATURE1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF")]),t._v("\n#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constant")]),t._v(" EXAMPLE_EVENT_SIGNATURE2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Storage Slots */")]),t._v("\n#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constant")]),t._v(" EXAMPLE_SLOT1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FREE_STORAGE_POINTER")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constant")]),t._v(" EXAMPLE_SLOT2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FREE_STORAGE_POINTER")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constant")]),t._v(" EXAMPLE_SLOT3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FREE_STORAGE_POINTER")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Constructor */")]),t._v("\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("CONSTRUCTOR")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("takes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Macros */")]),t._v("\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("MYMAC")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" takes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Entry Point */")]),t._v("\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAIN")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" takes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("The next aspect of this is more complicated, because it depends on the context and functionality of the contract. Essentially, we want to categorize macros into sections based on their functionality. Here is an example from an existing ERC20 contract:")]),t._v(" "),n("div",{staticClass:"language-solidity extra-class"},[n("pre",{pre:!0,attrs:{class:"language-solidity"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Accounting Macros */")]),t._v("\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("BALANCE_OF")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" takes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("TOTAL_SUPPLY")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" takes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ALLOWANCE")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" takes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Transfer Macros */")]),t._v("\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("TRANSFER_TAKE_FROM")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("takes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("TRANSFER_GIVE_TO")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("takes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("TRANSFER")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("takes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Approval Macros */")]),t._v("\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("APPROVE")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" takes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Mint Macros */")]),t._v("\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("MINT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("takes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"natspec-comments"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#natspec-comments"}},[t._v("#")]),t._v(" Natspec Comments")]),t._v(" "),n("p",[t._v("To make Huff as easy as possible to transition to from Solidity, Natspec comments are encouraged for use in the contract.")]),t._v(" "),n("p",[t._v("At the top of a Huff file, it is recommended to include the following natspec comments:")]),t._v(" "),n("div",{staticClass:"language-md extra-class"},[n("pre",{pre:!0,attrs:{class:"language-md"}},[n("code",[t._v("/// @title The title of the contract\n/// @author The contract author\n/// @notice A short description of the contract\n")])])]),n("p",[t._v("Macros are also encouraged to include natspec comments where useful. For example, huffmate's "),n("a",{attrs:{href:"https://github.com/pentagonxyz/huffmate/blob/main/src/utils/Multicallable.huff#L14-L21",target:"_blank",rel:"noopener noreferrer"}},[t._v("Multicallable Huff Contract"),n("OutboundLink")],1),t._v(" contains the following macro natspec above the "),n("code",[t._v("MULTICALL()")]),t._v(" macro.")]),t._v(" "),n("div",{staticClass:"language-md extra-class"},[n("pre",{pre:!0,attrs:{class:"language-md"}},[n("code",[t._v("/// @notice Multicall function entry point.\n/// @dev This macro should be placed alone under a function selector's jump label.\n///\n/// Expected calldata: "),n("span",{pre:!0,attrs:{class:"token code-snippet code keyword"}},[t._v("`bytes[]`")]),t._v(" containing valid ABI-encoded function calls\n/// as elements.\n///\n/// Note: this macro only allows for multicalling functions that are within\n/// the contract it is invoked in.\n")])])]),n("h2",{attrs:{id:"code-comments"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#code-comments"}},[t._v("#")]),t._v(" Code Comments")]),t._v(" "),n("p",[t._v("Comments should use the double slash ("),n("code",[t._v("//")]),t._v(") syntax, unless they are used to mark a new section of the codebase (see above).")]),t._v(" "),n("p",[t._v("Comments describing the functionality of a statement, macro, etc should be on the line(s) prior.")]),t._v(" "),n("div",{staticClass:"language-solidity extra-class"},[n("pre",{pre:!0,attrs:{class:"language-solidity"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// owner slot")]),t._v("\n#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constant")]),t._v(" OWNER_SLOT "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FREE_STORAGE_POINTER")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("Comments indicating the stack "),n("em",[t._v("after")]),t._v(" an instruction should be on the right of the instruction. Instruction comments within the same code block should be aligned vertically with the right-most instruction comment. The right-most instruction comment should be one “tab” from the right of the instruction.")]),t._v(" "),n("div",{staticClass:"language-solidity extra-class"},[n("pre",{pre:!0,attrs:{class:"language-solidity"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x20")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [value]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [offset, value]")]),t._v("\nmstore  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n")])])]),n("h2",{attrs:{id:"macro-definition"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#macro-definition"}},[t._v("#")]),t._v(" Macro Definition")]),t._v(" "),n("p",[t._v("Macros with a non-zero "),n("code",[t._v("takes")]),t._v(" expectation should include a single comment at the start of the code block indicating the expected stack in the following format.")]),t._v(" "),n("div",{staticClass:"language-solidity extra-class"},[n("pre",{pre:!0,attrs:{class:"language-solidity"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Reverts if caller is not the owner.")]),t._v("\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ONLY_OWNER")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" takes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// takes: [calling_address]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("OWNER_SLOT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [owner_slot, calling_address]")]),t._v("\n    sload         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [owner_address, calling_address]")]),t._v("\n    eq            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [is_owner]")]),t._v("\n    is_owner      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [is_owner_jumpdest, is_owner]")]),t._v("\n    jumpi         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v("          "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [revert_size]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v("          "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [revert_offset, revert_size]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("revert")]),t._v("        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n    is_owner"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("The exception to this would be the function selector switch in the contract’s entry point, given its common usage.")]),t._v(" "),n("p",[t._v("The contract entry point should contain the function selector switch first, with each jump destination having one additional line of whitespace between one another.")]),t._v(" "),n("div",{staticClass:"language-solidity extra-class"},[n("pre",{pre:!0,attrs:{class:"language-solidity"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Entry point.")]),t._v("\n#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("view")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sub")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("view")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAIN")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" takes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Grab the function selector from the calldata")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v(" calldataload "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xE0")]),t._v(" shr                 "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [selector]")]),t._v("\n\n    dup1 "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("__FUNC_SIG")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("add"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" eq add_func jumpi     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [selector]")]),t._v("\n    dup1 "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("__FUNC_SIG")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sub"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" eq sub_func jumpi     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [selector]")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Revert if no functions match")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("revert")]),t._v("\n\n    add_func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ADD")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    sub_func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("SUB")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"function-abi-definition"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#function-abi-definition"}},[t._v("#")]),t._v(" Function ABI Definition")]),t._v(" "),n("p",[n("strong",[t._v("This is entirely optional, feedback is appreciated here.")])]),t._v(" "),n("p",[t._v("Defining an external function ABI should consist of two components, the function definition and the 4 byte function selector defined as a constant. Defining a constant representing the function selector directly following a function definition makes for clear usage in the contract’s entry point.")]),t._v(" "),n("p",[t._v("The function selector definition should be screaming snake case suffixed with "),n("code",[t._v("_SEL")]),t._v(". This also makes clear the function selector switch’s behavior.")]),t._v(" "),n("p",[t._v("Omitting whitespace between the function definition and selector would also make the relationship between the two more clear.")]),t._v(" "),n("div",{staticClass:"language-solidity extra-class"},[n("pre",{pre:!0,attrs:{class:"language-solidity"}},[n("code",[t._v("#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("view")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ADD")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" takes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAIN")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" takes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Grab the function selector from the calldata")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v(" calldataload "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xE0")]),t._v(" shr                 "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [selector]")]),t._v("\n    dup1 "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("__FUNC_SIG")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("add"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" eq add_func jumpi     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [selector]")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Revert if no functions match")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("revert")]),t._v("\n\n    add_func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ADD")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"event-abi-definition"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-abi-definition"}},[t._v("#")]),t._v(" Event ABI Definition")]),t._v(" "),n("p",[n("strong",[t._v("This is entirely optional, feedback is appreciated here.")])]),t._v(" "),n("p",[t._v("Defining an event ABI should consist of two components, the event definition and the 32 byte event signature defined as a constant.")]),t._v(" "),n("p",[t._v("The event signature should be screaming snake case suffixed with "),n("code",[t._v("_SIG")]),t._v(".")]),t._v(" "),n("p",[t._v("Omitting whitespace between the event definition and signature would also make the relationship between the two more clear.")]),t._v(" "),n("div",{staticClass:"language-solidity extra-class"},[n("pre",{pre:!0,attrs:{class:"language-solidity"}},[n("code",[t._v("#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("event")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewOwner")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constant")]),t._v(" NEW_OWNER_SIG "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x3edd90e7770f06fafde38004653b33870066c33bfc923ff6102acd601f85dfbc")]),t._v("\n")])])]),n("h2",{attrs:{id:"jump-labels"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jump-labels"}},[t._v("#")]),t._v(" Jump Labels")]),t._v(" "),n("p",[n("strong",[t._v("Open to suggestions here.")])]),t._v(" "),n("p",[t._v("Should instructions following jump labels be indented? Doing so may make execution unclear, as the indention is not taken into consideration at compile time. In the following example, the "),n("code",[t._v("operation0")]),t._v(" jump label’s subsequent code is executed, but execution continues at the "),n("code",[t._v("operation1")]),t._v(" label, despite it not being clear this is the case.")]),t._v(" "),n("div",{staticClass:"language-solidity extra-class"},[n("pre",{pre:!0,attrs:{class:"language-solidity"}},[n("code",[t._v("operation0\njump\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ....")]),t._v("\n\noperation0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x01")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [b]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x02")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [a, b]")]),t._v("\n    add      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [sum]")]),t._v("\noperation1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x02")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [b, sum]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x01")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [a, b, sum]")]),t._v("\n    sub      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [diff, sum]")]),t._v("\n")])])]),n("p",[t._v("It may be best to omit indentation, at least in the standard library.")]),t._v(" "),n("div",{staticClass:"language-solidity extra-class"},[n("pre",{pre:!0,attrs:{class:"language-solidity"}},[n("code",[t._v("operation0\njump\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ....")]),t._v("\n\noperation0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x01")]),t._v("         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [b]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x02")]),t._v("         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [a, b]")]),t._v("\nadd          "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [sum]")]),t._v("\noperation1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x02")]),t._v("         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [b, sum]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x01")]),t._v("         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [a, b, sum]")]),t._v("\nsub          "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [diff, sum]")]),t._v("\n")])])]),n("h2",{attrs:{id:"contract-call-return"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#contract-call-return"}},[t._v("#")]),t._v(" Contract Call Return")]),t._v(" "),n("p",[n("strong",[t._v("Open to suggestions here.")])]),t._v(" "),n("p",[t._v("There is an issue with using something such as a reentrancy guard, which is a potential "),n("code",[t._v("return")]),t._v(" instruction before the lock is restored to the unlocked state. Take the following example.")]),t._v(" "),n("div",{staticClass:"language-solidity extra-class"},[n("pre",{pre:!0,attrs:{class:"language-solidity"}},[n("code",[t._v("#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("doAction")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("view")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constant")]),t._v(" LOCK_SLOT "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FREE_STORAGE_POINTER")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NON_REENTRANT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" takes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LOCK_SLOT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [lock_slot]")]),t._v("\n    sload        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [lock]")]),t._v("\n    iszero       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [is_unlocked]")]),t._v("\n    unlocked     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [unlocked_jumpdest]")]),t._v("\n    jumpi        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v("         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [size]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v("         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [offset, size]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("revert")]),t._v("       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n    unlocked"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x01")]),t._v("         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [lock_value]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LOCK_SLOT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [lock_slot, lock_value]")]),t._v("\n    sstore       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("UNLOCK")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" takes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x01")]),t._v("         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [lock_value]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LOCK_SLOT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [lock_slot, lock_value]")]),t._v("\n    sstore       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("DO_ACTION")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" takes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x45")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [value]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [offset, value]")]),t._v("\n    mstore  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x20")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [size]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [offset, size]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAIN")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" takes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Grab the function selector from the calldata")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v(" calldataload "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xE0")]),t._v(" shr                       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [selector]")]),t._v("\n    dup1 "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("__FUNC_SIG")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("doAction"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" eq do_action jumpi     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [selector]")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Revert if no functions match")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("revert")]),t._v("\n\n    do_action"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NON_REENTRANT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("DO_ACTION")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("UNLOCK")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("In this example, "),n("code",[t._v("DO_ACTION")]),t._v(" is non-reentrant, so it first uses "),n("code",[t._v("NON_REENTRANT")]),t._v(", but it uses the "),n("code",[t._v("return")]),t._v(" instruction internally, which means the "),n("code",[t._v("UNLOCK")]),t._v(" macro will never be executed, resulting in a permanently locked function.")]),t._v(" "),n("p",[t._v("I’m not sure the best way to handle this until a transient-storage opcode is implemented. Maybe a Huff convention could be established to have these external-function macros like "),n("code",[t._v("DO_ACTION")]),t._v(" return a "),n("code",[t._v("size")]),t._v(" and "),n("code",[t._v("offset")]),t._v(" on the stack, then have the "),n("code",[t._v("return")]),t._v(" instruction at the end.")]),t._v(" "),n("p",[t._v("The following would be an example of external-function macros returning the stack values instead of using the "),n("code",[t._v("return")]),t._v(" instruction, allowing for more safe use of modifiers.")]),t._v(" "),n("div",{staticClass:"language-solidity extra-class"},[n("pre",{pre:!0,attrs:{class:"language-solidity"}},[n("code",[t._v("#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("doAction")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("view")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("otherAction")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("view")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n#define "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constant")]),t._v(" LOCK_SLOT "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("FREE_STORAGE_POINTER")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NON_REENTRANT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" takes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LOCK_SLOT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [lock_slot]")]),t._v("\n    sload        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [lock]")]),t._v("\n    iszero       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [is_unlocked]")]),t._v("\n    unlocked     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [unlocked_jumpdest]")]),t._v("\n    jumpi        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v("         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [size]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v("         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [offset, size]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("revert")]),t._v("       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n    unlocked"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x01")]),t._v("         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [lock_value]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LOCK_SLOT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [lock_slot, lock_value]")]),t._v("\n    sstore       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("UNLOCK")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" takes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v("         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [lock_value]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LOCK_SLOT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [lock_slot, lock_value]")]),t._v("\n    sstore       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("DO_ACTION")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" takes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x45")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [value]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [offset, value]")]),t._v("\n    mstore  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x20")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [size]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [offset, size]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("OTHER_ACTION")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" takes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [size]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [offset, size]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n#define macro "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAIN")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" takes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Grab the function selector from the calldata")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v(" calldataload "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xE0")]),t._v(" shr                          "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [selector]")]),t._v("\n    dup1 "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("__FUNC_SIG")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("doAction"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" eq do_action jumpi        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [selector]")]),t._v("\n    dup1 "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("__FUNC_SIG")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("otherAction"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" eq other_action jumpi  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [selector]")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Revert if no functions match")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("revert")]),t._v("\n\n\n    do_action"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NON_REENTRANT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("DO_ACTION")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        finish jump\n\n    other_action"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("OTHER_ACTION")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        finish jump\n\n    finish"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// stack: [offset, size]")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("UNLOCK")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);