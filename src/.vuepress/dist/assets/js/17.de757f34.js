(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{445:function(t,e,a){"use strict";a.r(e);var s=a(66),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"huff-cli"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#huff-cli"}},[t._v("#")]),t._v(" Huff CLI")]),t._v(" "),a("p",[t._v("While most of the time you will be compiling your Huff contracts in a foundry\nproject using the "),a("a",{attrs:{href:"https://github.com/huff-language/foundry-huff",target:"_blank",rel:"noopener noreferrer"}},[t._v("foundry-huff"),a("OutboundLink")],1),t._v("\nlibrary, the "),a("a",{attrs:{href:"https://github.com/huff-language/huff-rs",target:"_blank",rel:"noopener noreferrer"}},[t._v("compiler"),a("OutboundLink")],1),t._v("'s CLI offers some additional configuration options as well as some useful utilities.")]),t._v(" "),a("h2",{attrs:{id:"options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[t._v("#")]),t._v(" Options")]),t._v(" "),a("div",{staticClass:"language-plaintext extra-class"},[a("pre",{pre:!0,attrs:{class:"language-plaintext"}},[a("code",[t._v("huffc 0.3.0\nHuff Language Compiler built in Pure Rust.\n\nUSAGE:\n    huffc [OPTIONS] [PATH] [SUBCOMMAND]\n\nARGS:\n    <PATH>    The contract(s) to compile\n\nOPTIONS:\n    -a, --artifacts                       Whether to generate artifacts or not\n    -b, --bytecode                        Generate and log bytecode\n    -c, --constants <CONSTANTS>...        Override / set constants for the compilation environment\n    -d, --output-directory <OUTPUTDIR>    The output directory [default: ./artifacts]\n    -g, --interface [<INTERFACE>...]      Generate solidity interface for a Huff artifact\n    -h, --help                            Print help information\n    -i, --inputs <INPUTS>...              The input constructor arguments\n    -n, --interactive                     Interactively input the constructor args\n    -o, --output <OUTPUT>                 The output file path\n    -r, --bin-runtime                     Generate and log runtime bytecode\n    -s, --source-path <SOURCE>            The contracts source path [default: ./contracts]\n    -v, --verbose                         Verbose output\n    -V, --version                         Print version information\n    -z, --optimize                        Optimize compilation [WIP]\n\nSUBCOMMANDS:\n    help    Print this message or the help of the given subcommand(s)\n    test    Test subcommand\n")])])]),a("h3",{attrs:{id:"a-artifacts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-artifacts"}},[t._v("#")]),t._v(" "),a("code",[t._v("-a")]),t._v(" Artifacts")]),t._v(" "),a("p",[t._v("Passing the "),a("code",[t._v("-a")]),t._v(" flag will generate "),a("code",[t._v("Artifact")]),t._v(" JSON file(s) in the "),a("code",[t._v("./artifacts")]),t._v("\ndirectory or wherever the "),a("code",[t._v("-d")]),t._v(" flag designates. The "),a("code",[t._v("Artifact")]),t._v(" JSON contains\nthe following information:")]),t._v(" "),a("ul",[a("li",[t._v("File\n"),a("ul",[a("li",[t._v("Path")]),t._v(" "),a("li",[t._v("Source")]),t._v(" "),a("li",[t._v("Dependencies")])])]),t._v(" "),a("li",[t._v("Bytecode")]),t._v(" "),a("li",[t._v("Runtime Bytecode")]),t._v(" "),a("li",[t._v("Contract ABI")])]),t._v(" "),a("p",[t._v("Example:")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("huffc ./src/ERC20.huff -a\n")])])]),a("h3",{attrs:{id:"b-bytecode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-bytecode"}},[t._v("#")]),t._v(" "),a("code",[t._v("-b")]),t._v(" Bytecode")]),t._v(" "),a("p",[t._v("Passing the "),a("code",[t._v("-b")]),t._v(" flag will tell the compiler to log the bytecode generated during\nthe compilation process to the console.")]),t._v(" "),a("p",[t._v("Example:")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("huffc ./src/ERC20.huff -b\n")])])]),a("h3",{attrs:{id:"c-constants"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-constants"}},[t._v("#")]),t._v(" "),a("code",[t._v("-c")]),t._v(" Constants")]),t._v(" "),a("p",[t._v("Arguments: "),a("code",[t._v("[CONSTANTS]")])]),t._v(" "),a("p",[t._v("Passing the "),a("code",[t._v("-c")]),t._v(" flag allows you to override and set constants for the current compilation environment. Literals must be supplied in "),a("code",[t._v("0x")]),t._v(" format and be <= 32 bytes.")]),t._v(" "),a("p",[t._v("Example:")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("huffc ./Test.huff -c "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("MY_CONST")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("0x01 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("MY_OTHER_CONST")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("0xa57b\n")])])]),a("h3",{attrs:{id:"d-output-directory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#d-output-directory"}},[t._v("#")]),t._v(" "),a("code",[t._v("-d")]),t._v(" Output directory")]),t._v(" "),a("p",[t._v("Arguments: "),a("code",[t._v("<OUTPUT_DIR>")]),t._v(", Default: "),a("code",[t._v("./artifacts")])]),t._v(" "),a("p",[t._v("Passing the "),a("code",[t._v("-d")]),t._v(" flag allows you to designate the directory that the "),a("code",[t._v("Artifact")]),t._v("\nJSON file will be exported to.")]),t._v(" "),a("p",[t._v("Example:")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("huffc ./src/ERC20.huff -d ./my_artifacts\n")])])]),a("h3",{attrs:{id:"g-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g-interface"}},[t._v("#")]),t._v(" "),a("code",[t._v("-g")]),t._v(" Interface")]),t._v(" "),a("p",[t._v("Passing the "),a("code",[t._v("-g")]),t._v(" flag will generate a Solidity interface for the Huff contract\nprovided. This interface is generated based off of the function and event\ndefinitions within the contract.")]),t._v(" "),a("p",[t._v("The solidity file will always be named "),a("code",[t._v("I<HUFF_FILE_NAME>.sol")]),t._v(", and it will be\nsaved in the same directory as the Huff contract itself.")]),t._v(" "),a("p",[t._v("Example:")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("huffc ./src/ERC20.huff -g\n")])])]),a("h3",{attrs:{id:"i-inputs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i-inputs"}},[t._v("#")]),t._v(" "),a("code",[t._v("-i")]),t._v(" Inputs")]),t._v(" "),a("p",[t._v("Arguments: "),a("code",[t._v("[CONSTRUCTOR_ARGS]")])]),t._v(" "),a("p",[t._v("Passing the "),a("code",[t._v("-i")]),t._v(" flag allows you to set the constructor arguments for the\ncontract that is being compiled. All inputs should be separated by a comma.\nIf you'd like to input the constructor arguments interactively instead,\nuse the "),a("code",[t._v("-n")]),t._v(" flag.")]),t._v(" "),a("p",[t._v("Example (assuming "),a("code",[t._v("ERC20.huff")]),t._v("'s constructor accepts a String and a uint):")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("huffc ./src/ERC20.huff -i "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"TestToken"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v("\n")])])]),a("h3",{attrs:{id:"n-interactive-inputs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#n-interactive-inputs"}},[t._v("#")]),t._v(" "),a("code",[t._v("-n")]),t._v(" Interactive Inputs")]),t._v(" "),a("p",[t._v("Passing the "),a("code",[t._v("-n")]),t._v(" flag allows you to input constructor arguments\ninteractively through the CLI rather than via the "),a("code",[t._v("-i")]),t._v(" flag.")]),t._v(" "),a("p",[t._v("Example:")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("huffc ./src/ERC20.huff -n\n")])])]),a("h3",{attrs:{id:"o-output"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#o-output"}},[t._v("#")]),t._v(" "),a("code",[t._v("-o")]),t._v(" Output")]),t._v(" "),a("p",[t._v("Arguments: "),a("code",[t._v("<FILE_PATH>")])]),t._v(" "),a("p",[t._v("Passing the "),a("code",[t._v("-o")]),t._v(" flag allows you to export the artifact to a specific file\nrather than a folder.")]),t._v(" "),a("p",[t._v("Example:")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("huffc ./src/ERC20.huff -o ./artifact.json\n")])])]),a("h3",{attrs:{id:"s-source-path"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#s-source-path"}},[t._v("#")]),t._v(" "),a("code",[t._v("-s")]),t._v(" Source Path")]),t._v(" "),a("p",[t._v("Arguments: "),a("code",[t._v("<CONTRACTS_FOLDER>")]),t._v(", Default: "),a("code",[t._v("./contracts")])]),t._v(" "),a("p",[t._v("Passing the "),a("code",[t._v("-s")]),t._v(" flag allows you to change the directory that the compiler scans\nfor Huff contracts.")]),t._v(" "),a("p",[t._v("Example:")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("huffc -s ./src/\n")])])]),a("h3",{attrs:{id:"r-runtime-bytecode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#r-runtime-bytecode"}},[t._v("#")]),t._v(" "),a("code",[t._v("-r")]),t._v(" Runtime Bytecode")]),t._v(" "),a("p",[t._v("Passing the "),a("code",[t._v("-r")]),t._v(" flag will tell the compiler to print the runtime bytecode\nof the compiled contract.")]),t._v(" "),a("h3",{attrs:{id:"v-verbose-output"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v-verbose-output"}},[t._v("#")]),t._v(" "),a("code",[t._v("-v")]),t._v(" Verbose Output")]),t._v(" "),a("p",[t._v("Passing the "),a("code",[t._v("-v")]),t._v(" flag will tell the compiler to print verbose output during\nthe compilation process. This output can be useful for debugging contract\nas well as compiler errors.")]),t._v(" "),a("p",[t._v("Example:")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("huffc ./src/ERC20.huff -v\n")])])]),a("h3",{attrs:{id:"z-optimize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#z-optimize"}},[t._v("#")]),t._v(" "),a("code",[t._v("-z")]),t._v(" Optimize")]),t._v(" "),a("p",[t._v("Not yet implemented in "),a("a",{attrs:{href:"https://github.com/huff-language/huff-rs",target:"_blank",rel:"noopener noreferrer"}},[t._v("the compiler"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"subcommands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#subcommands"}},[t._v("#")]),t._v(" Subcommands")]),t._v(" "),a("h3",{attrs:{id:"test"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test"}},[t._v("#")]),t._v(" "),a("code",[t._v("test")])]),t._v(" "),a("ul",[a("li",[t._v("Format: "),a("code",[t._v("huffc ./path/to/Contract.huff test [-f <list|table|json>] [-m <TEST_NAME>]")])])]),t._v(" "),a("p",[t._v("The test subcommand is the entry point to running tests within a Huff contract.")]),t._v(" "),a("h4",{attrs:{id:"optional-flags"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#optional-flags"}},[t._v("#")]),t._v(" Optional Flags")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("-f")]),t._v(" or "),a("code",[t._v("--format")]),t._v(": Formats the test report as a list, table, or JSON.")]),t._v(" "),a("li",[a("code",[t._v("-m")]),t._v(" or "),a("code",[t._v("--match")]),t._v(": Runs a specific test with the name passed to this flag.")])])])}),[],!1,null,null,null);e.default=r.exports}}]);